%%                          optimizing _dotfinding.m
% Alistair Boettiger                                   Date Begun: 01/31/11
% Levine Lab 

% Just a testing script to optimize dot finding algorithm and parameters.
% This is a faster testbed then running the whole stack analysis as in
% imsinglemolecule.fig
% 
% 

%  handles.fdata = '/Users/alistair/Documents/Berkeley/Levine_Lab/ImageProcessing/';
% load([handles.fdata,'/','test']);

clear all;
folder = '/Volumes/Data/Lab Data/Raw_Data/02-17-11/';
fname = 'MP05_22C_sna_y'; emb = '02';
%fname = 'MP09_22C_hb_y_d'; emb = '01';

filename = [folder,'/',fname];
Im_data = lsm_read_mod([filename,'.mat'],str2double(emb),1.5E4); 

%%
handles.mRNAchn1 = 1;
handles.Im = Im_data;
clear Im_data; %


% zoom in on specific region
 m = .6; % .85;
Zs = length(Im_data);
[h,w] = size(Im_data{1,1}{1}); 

xp1= floor(h/2*m); xp2 = floor(h/2*(2-m));
yp1 = floor(w/2*m); yp2 = floor(w/2*(2-m));


    alphaE = 1;%   % Not Necessary input, need fixed at 1
    sigmaE = 3;%  IMPORTANT
    alphaI = 1.0;%  % Not Necessary input, need fixed at 1 
    min_int  = 0.02;% .05 % not necessary Fix at Zero
    FiltSize = 25;% 
    min_size = 10;% 
    sigmaI = 4; % IMPORTANT
   
    % Build the Gaussian Filter   
    Ex = fspecial('gaussian',FiltSize,sigmaE); % excitatory gaussian
    Ix = fspecial('gaussian',FiltSize,sigmaI); % inhibitory gaussian
   
Filt = alphaE*Ex - alphaI*Ix;
%figure(1); clf; imagesc(Filt); colorbar;   

%%
  disp('running step 4...'); tic
z = 20;

     I0 = handles.Im{1,z-1}{handles.mRNAchn1}( xp1:xp2,yp1:yp2 );
     D0 = dotfinder(I0,alphaE,alphaI,Ex,Ix,min_int,min_size);

     I1 = handles.Im{1,z}{handles.mRNAchn1}( xp1:xp2,yp1:yp2 );
     D1 = dotfinder(I1,alphaE,alphaI,Ex,Ix,min_int,min_size);

     I2 = handles.Im{1,z+1}{handles.mRNAchn1}( xp1:xp2,yp1:yp2 );
     D2 = dotfinder(I2,alphaE,alphaI,Ex,Ix,min_int,min_size);
     
     I3 = handles.Im{1,z+2}{handles.mRNAchn1}( xp1:xp2,yp1:yp2 );
     D3 = dotfinder(I3,alphaE,alphaI,Ex,Ix,min_int,min_size);
     
     I4 = handles.Im{1,z+3}{handles.mRNAchn1}( xp1:xp2,yp1:yp2 );
     D4 = dotfinder(I4,alphaE,alphaI,Ex,Ix,min_int,min_size);
    
     
     [h,w] = size(I2);
     
 
     
 
     % convert to indices. 
     inds1 = floor(D1(:,2))+floor(D1(:,1))*h; 
     inds2 = floor(D2(:,2))+floor(D2(:,1))*h; 
     inds1(inds1>w*h) = w*h; 
     inds2(inds2>w*h) = w*h; 
     
     R1 = false(h,w); R1(inds1) = 1;
     R2 = false(h,w); R2(inds2) = 1;
     R1z = imdilate(R1,strel('disk',2)); % This is going to slow us down alot  
     
     R2u = R2 - R1z;  R2u(R2u<0) = 0; R2u = logical(R2u); % map of unique dots
     R2L = bwlabel(R2u);
     R2data = regionprops(R2L,'Centroid'); 
     D2u = reshape([R2data.Centroid],2,length(R2data))'; % vector centroids of unique dots
     inds2u =  floor(D2u(:,2))+floor(D2u(:,1))*h;  % raster indexed based centroids of unique dots ;
 
%  plotting    
     Iz = uint16(zeros(h,w,3));
     Iz(:,:,1) = 5*I1 + 2*I4+    I3  + 3*I0;
     Iz(:,:,2) =        3*I4 + 2*I3  + I0;
     Iz(:,:,3) = 5*I2+  2*I4+    I3  + I0;
  figure(6); clf;  
     imshow(Iz);    hold on;    
     plot(D1(:,1),D1(:,2),'y+');
     plot(D2(:,1),D2(:,2),'co'); 
     plot(D2u(:,1),D2u(:,2),'c.','MarkerSize',10);
       plot(D3(:,1),D3(:,2),'+','color',[1,1,1]);
     plot(D4(:,1),D4(:,2),'+','color',[.5,1,.25]); 
     plot(D0(:,1),D0(:,2),'+','color',[1,.2,.2]); 

     clear D0 D1 D2 D3 D4 I1 I2 I3 I4 I0;
     
     toc
     %%
     

% % Quick sample view:
% z = 20;
% Il0 = handles.Im{1,z-1}{handles.mRNAchn1}( xp1:xp2,yp1:yp2 );
% Il1 = handles.Im{1,z}{handles.mRNAchn1}( xp1:xp2,yp1:yp2 );
% Il2 = handles.Im{1,z+1}{handles.mRNAchn1}( xp1:xp2,yp1:yp2 );
% figure(1); clf; imshow(Il0);



[hs,ws] = size(Iz(:,:,1)); 

Isect1 = uint8(zeros(hs,ws,Zs));
Isect2 = uint8(zeros(hs,ws,Zs));
Inuc = uint8(zeros(hs,ws,Zs));



plotdata = 0 ;% don't show 

 DotData = cell(1,Zs);    
  DotMasks = cell(1,Zs); 
 Alldots = uint8(zeros(hs,ws,1)); 

 tic; disp('finding dots...'); 
for z = 1:Zs % z = 20        
      % Dot finding for channel 1
          I1 =  handles.Im{1,z}{handles.mRNAchn1}( xp1:xp2,yp1:yp2 );
         
          [cent1,bw1,dL] = dotfinder(I1,alphaE,alphaI,Ex,Ix,min_int,min_size);
          % figure(2); clf; imagesc(  Isect1(:,:,z));
          
          DotData{z} = cent1;
          DotMasks{z} = dL; 
          Alldots(:,:,z) = makeuint(I1,8); % 2 
              
          bnd1 = imdilate(bw1,strel('disk',2)) -bw1;         
         % figure(2); clf; imshow(bnd2);
          mask = double(2*bw1)+bnd1;   
          mask(mask==0)=NaN; 
          mask(mask==1) = 0; 
          Isect1(:,:,z) = makeuint(I1,8).*makeuint(mask,8); % 255*double(I1)/2^16.*mask;
         %  figure(2); clf; imagesc(mask);   
         figure(2); clf; imagesc(mask);   
end
toc;
%%
NewDotC = CheckDotUpDown(DotData,DotMasks,Alldots,hs,ws,plotdata);

%%

first = 1; last = Zs;
depth_code = jet(last-first+1);   
Alldots_proj = max(Alldots(:,:,first:last),[],3); % perform max project


figure(2); clf; colormap hot; imagesc(Alldots_proj); hold on;
 plot(  NewDotC(:,1),NewDotC(:,2),'bo','MarkerSize',10 );

%%


[X,Y] = meshgrid((1:ws)*50,(1:hs)*50);
Istack = zeros(hs,ws,Zs);
nmax = round(max(Inuc(:)));
c1max = round(max(Isect1(:)));
c2max = round(max(Isect2(:)));
figure(1);  clf;
colordef black; set(gca,'color','k'); set(gcf,'color','k');

% % Plot nuclei data
% for z=first:last
%     In = Inuc(:,:,z) + c1max + c2max; 
%     Z = (Zs - z*ones(hs,ws))*340;
%     surf(X,Y,Z,In); hold on;
% end
% shading interp;
% alpha(.45);  % make nuclei transparent 

figure(1); clf;  
for z=first:last
    figure(1);  hold on;
    I1 = Isect1(:,:,z) ;
   Z = (Zs - z*ones(hs,ws))*340;
    surf(X,Y,Z,I1); hold on;

   %plot3(D2u_Z{z}(:,1)*50,D2u_Z{z}(:,2)*50,((Zs-z)*340)*ones(1,length(D2u_Z{z})),'o','MarkerSize',10,'Color',depth_code(z,:)   ); hold on;
end
plot3(NewDotC(:,1)*50,NewDotC(:,2)*50,340*(Zs-NewDotC(:,3)) ,'.','MarkerSize',20); 

shading interp;

% figure(1);  hold on;
% for z=first:last
%     I2 = Isect2(:,:,z) + c1max+1; 
%     Z = (Zs - z*ones(hs,ws))*340;
%     surf(X,Y,Z,I2); hold on;
% end
% shading interp;
% 
% C2 = zeros(c2max,3);
% for cc = 1:c2max
%     C2(cc,:) = [((cc-1)/c2max)^3,((cc-1)/c2max)^.5,((cc-1)/c2max)^2];
% end

CN = cool(nmax); 
C1 = hot(c1max);
%C1 = flipud(1-hot(c1max));


% colormap([0,0,0;C1;C2;CN]); colorbar; caxis([0,nmax+c1max+c2max]); 
colormap(C1); colorbar; caxis([0,c1max]);
%view(-109,50); 
view(40,-30); axis on;
set(gca,'FontSize',12);
zlim([(Zs-last)*340,(Zs-first+1)*340]);
xlabel('nanometers');  ylabel('nanometers'); zlabel('nanometers');

 
%%  Can we extract the intensities inside the sphere and rplot just the
% sphere with the intensity of the original dot?  

